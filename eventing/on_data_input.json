[{"appcode":"function updateAggregate(current_doc, transaction_doc, aggregation_meta, transaction_doc_id) {\n\n    // update the document with the new transaction\n    var new_count = current_doc.count + 1;\n    var new_total_amt = current_doc.total_amt + transaction_doc.amount;\n    var new_average_amt = new_total_amt / new_count;\n    var new_transactions = []\n\n    // if the transactions array is empty, create a new one\n    if ( !current_doc.transactions || current_doc.transactions.length == 0 ) {\n        new_transactions = [transaction_doc_id];\n    } else {\n        // append the new transaction to the existing transactions array\n        new_transactions = [...current_doc.transactions, transaction_doc_id];\n    }\n    \n    // write back to the same doc\n    let res = couchbase.mutateIn(m_e_kv_users, aggregation_meta, [\n        couchbase.MutateInSpec.replace(\"count\", new_count),\n        couchbase.MutateInSpec.replace(\"total_amt\", new_total_amt),\n        couchbase.MutateInSpec.replace(\"average_amt\", new_average_amt),\n        couchbase.MutateInSpec.replace(\"transactions\", new_transactions),\n      ]);\n      \n    return res;\n}\n\n\n\nfunction OnUpdate(doc, meta) {\n    // assemble the to-be-inserted document key\n    const user_id = doc.user_id;\n    const doc_key = doc.time_str_trunc + '-' + user_id;\n    \n    // initialize the current_doc and aggregation_meta\n    let current_doc = null;\n    let aggregation_meta = { \"id\": doc_key };\n    \n    // get current document using Advanced INSERT ops to get the CAS value too\n    var result = couchbase.get(m_e_kv_users, aggregation_meta);\n        if (result.success) {\n            current_doc = result.doc;\n            aggregation_meta = result.meta;\n    }\n    \n    // if the document does not exist, create it\n    if (!current_doc) {\n        current_doc = {\n            \"user_id\": user_id,\n            \"count\": 0,\n            \"total_amt\": 0,\n            \"average_amt\": 0,\n            \"transactions\": []\n        };\n\n        couchbase.insert(m_e_kv_users, aggregation_meta, current_doc);\n\n        // get current document using Advanced INSERT ops to get the CAS value too\n        result = couchbase.get(m_e_kv_users, aggregation_meta);\n        if (result.success) {\n            current_doc = result.doc;\n            aggregation_meta = result.meta;\n        }\n    }\n\n    // use a while loop to keep retrying the operation until it succeeds\n    // this is to handle the potential CAS mismatch issue\n    // define the success flag and retry counter\n    let success = false;\n    let retry_counter = 0;\n\n    while ( !success ) {\n        // update the document with the new transaction\n        var aggregate_result = updateAggregate(current_doc, doc, aggregation_meta, meta.id);\n       \n        if (aggregate_result.success) {\n            // print the try_counter only if it's greater than 0\n            if ( retry_counter > 0 ) {\n                log(\"insert success at retry: \", retry_counter);\n            }\n\n            // set the success flag to true and exit the loop\n            success = true; \n        }\n        \n        // increment the retry counter\n        retry_counter++;\n        \n        // retry \n        var result = couchbase.get(m_e_kv_users, { \"id\": doc_key });\n        if (result.success) {\n            current_doc = result.doc;\n            aggregation_meta = result.meta;\n        }\n    }\n}\n","depcfg":{"buckets":[{"alias":"src_coll","bucket_name":"main","scope_name":"data","collection_name":"data","access":"rw"},{"alias":"m_e_kv_users","bucket_name":"main","scope_name":"aggregation","collection_name":"m_e_kv_users","access":"rw"}],"source_bucket":"main","source_scope":"data","source_collection":"data","metadata_bucket":"eventing","metadata_scope":"_default","metadata_collection":"_default"},"version":"evt-7.6.3-4200-ee","enforce_schema":false,"handleruuid":3681064895,"function_instance_id":"kJQ9i1","appname":"on_data_input","settings":{"cursor_aware":false,"dcp_stream_boundary":"from_now","deployment_status":false,"description":"","execution_timeout":60,"language_compatibility":"7.2.0","log_level":"INFO","n1ql_consistency":"none","num_timer_partitions":128,"processing_status":false,"timer_context_size":1024,"user_prefix":"eventing","worker_count":24},"function_scope":{"bucket":"*","scope":"*"}}]